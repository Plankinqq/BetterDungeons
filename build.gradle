plugins {
    id 'idea'
    id 'java'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'dev.architectury.architectury-pack200' version '0.1.3'
    id 'gg.essential.loom' version '0.10.0.+'
    id 'org.jetbrains.kotlin.jvm' version '1.6.21'
    id 'net.kyori.blossom' version '1.3.0'
}

tasks.wrapper {
    gradleVersion = '7.4'
    // You can either download the binary-only version of Gradle (BIN) or
    // the full version (with sources and documentation) of Gradle (ALL)
    distributionType = Wrapper.DistributionType.ALL
}
version = '4.0.0'
group = 'io.github.quantizr.DungeonRooms'
archivesBaseName = 'Dungeon_Rooms'
var mod_name = 'DRM'
var mod_id = 'dungeonrooms'

java {
    toolchain.languageVersion.set(JavaLanguageVersion.of(8))
}

blossom {
    replaceToken("@VER@", version)
    replaceToken("@NAME@", mod_name)
    replaceToken("@ID@", mod_id)
}

loom {
    launchConfigs {
        client {
            arg('--tweakClass', 'cc.polyfrost.oneconfigwrapper.OneConfigWrapper')
        }
    }
    runs {
        'client' {
            property('devauth.enabled','true')
            property('dungeonsroommod_debug','true')
            client()
        }
    }
    forge {
        pack200Provider.set(new dev.architectury.pack200.java.Pack200Adapter())
    }
}


sourceSets.main {
    output.setResourcesDir(file('$buildDir/classes/java/main'))
}


repositories {
    mavenCentral()
    maven { url 'https://repo.polyfrost.cc/releases' }
    maven { url 'https://jitpack.io' }
    maven {url 'https://pkgs.dev.azure.com/djtheredstoner/DevAuth/_packaging/public/maven/v1'}
}

configurations {
    implementation.extendsFrom shadowImpl
}


test {
    useJUnitPlatform()
}


dependencies {
    minecraft('com.mojang:minecraft:1.8.9')
    mappings('de.oceanlabs.mcp:mcp_stable:22-1.8.9')
    forge('net.minecraftforge:forge:1.8.9-11.15.1.2318-1.8.9')

    implementation 'org.jetbrains:annotations-java5:23.0.0'
    implementation 'org.joml:joml:1.10.5'
    implementation 'com.github.ben-manes.caffeine:caffeine:2.9.3'

    modRuntimeOnly('me.djtheredstoner:DevAuth-forge-legacy:1.1.0')

    compileOnly 'cc.polyfrost:oneconfig-1.8.9-forge:0.1.0-alpha+' // Should not be included in jar
    implementation 'cc.polyfrost:oneconfig-wrapper-launchwrapper:1.0.0-alpha+' // Should be included in jar
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Jar) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    archivesBaseName = 'drm'
    manifest {
        attributes['ModSide'] = 'CLIENT'
        attributes['TweakOrder'] = '0'
        attributes['TweakClass'] = 'cc.polyfrost.oneconfigwrapper.OneConfigWrapper'
        attributes['ForceLoadAsMod'] = 'true'
        attributes['FMLCorePluginContainsFMLMod'] = 'true'
//        this['TweakClass'] = 'org.spongepowered.asm.launch.MixinTweaker'
//        this['MixinConfigs'] = 'mixins.examplemod.json'
    }
}


tasks.shadowJar {

    archiveFileName = jar.archiveFileName
    relocate 'org.joml', 'io.github.quantizr.org.joml'
    relocate 'com.github.benmanes.caffeine', 'io.github.quantizr.com.github.benmanes.caffeine'

    dependencies {
        include(dependency('org.joml:joml:..*'))
        include(dependency('cc.polyfrost:oneconfig-wrapper-launchwrapper:..*'))
        include(dependency('com.github.ben-manes.caffeine:caffeine:..*'))
    }
}


tasks.named('remapJar') {
    archiveClassifier = 'all'
    from(tasks.shadowJar)
    input = tasks.shadowJar.archiveFile
}


tasks.assemble.dependsOn tasks.remapJar

processResources {
    inputs.property 'version', project.version
    from(sourceSets.main.resources.srcDirs) {
        duplicatesStrategy = 'include'
        include 'mcmod.info'
        expand 'version': project.version
    }
}